---
#- name: Register Region
#  command: echo {{ alicloud_region }}
#  register: region


#- name: Create Downloads
#  file:
#    path: "{{ download_dir }}"
#    state: directory


#- name: Create bosh-init
#  file:
#    path: "{{ base_path }}/{{ bosh.director_name }}"
#    state: directory


#- name: Git Clone Bosh Deployment
#  git:
#    repo: "https://github.com/cloudfoundry/bosh-deployment"
#    dest: '{{ base_path }}/{{ bosh.director_name }}/bosh-deployment'
#


#- name: Copy Private Key
#  copy:
#    src: '{{ private_key }}'
#    dest: '{{ bash_path }}/{{ bosh.director_name }}/bosh-deployment'


#- name: Set Bosh Environment
#  shell: '{{ item }}'
#  args:
#    executable: /bin/bash
#  with_items:
#    - export BOSH_DIRECTOR_IP={{ bosh.internal_ip }}
#    - echo export BOSH_DIRECTOR_IP={{ bosh.internal_ip }} >> ~/.bashrc
#    - echo export BOSH_LOG_LEVEL=info >> ~/.bashrc
#    - echo export BOSH_LOG_PATH=$(pwd)/bosh.log >> ~/.bashrc
#    - source ~/.bashrc


# bosh create-env bosh-deployment/bosh.yml --state=state.json --vars-store=creds.yml -o bosh-deployment/alicloud/cpi.yml -o bosh-deployment/alicloud/releases-in-china.yml -o bosh-deployment/jumpbox-user.yml -o bosh-deployment/misc/powerdns.yml -v dns_recursor_ip={{dns_recursor_ip}} -v download_dir={{download_dir}} -v director_name={{director_name}} -v internal_cidr={{internal_cidr}} -v internal_gw={{internal_gw}} -v internal_ip={{internal_ip}} -v vswitch_id={{vswitch_id}} -v security_group_id={{security_group_id_1}} -v access_key_id={{alicloud_access_key}} -v access_key_secret={{alicloud_secret_key}} -v region={{alicloud_region}}  -v zone={{bosh_zone}} -v key_pair_name={{key_pair_name}} -v private_key={{private_key}}
- name: Deploy Bosh
  shell: |
    bosh create-env bosh-deployment/bosh.yml \
    --state=state.json \
    --vars-store=creds.yml \
    -o bosh-deployment/vsphere/cpi.yml \
    -v director_name={{ bosh.director_name }} \
    -v internal_cidr={{ bosh.internal_cidr }} \
    -v internal_gw={{ bosh.internal_gw }} \
    -v internal_ip={{ bosh.internal_ip }} \
    -v network_name="{{ bosh.vm_network }}" \
    -v vcenter_dc={{ vcenter.datacenter }} \
    -v vcenter_ds={{ vcenter.datastore }} \
    -v vcenter_ip={{ vcenter.ip_addr }} \
    -v vcenter_user={{ vcenter.username }} \
    -v vcenter_password="{{ vcenter.password }}" \
    -v vcenter_templates={{ bosh.director_name }}-templates \
    -v vcenter_vms={{ bosh.director_name }}-vms \
    -v vcenter_disks={{ bosh.director_name }}-disks \
    -v vcenter_cluster={{ vcenter.cluster }}
  register: deploy_bosh
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
- debug: msg="{{ deploy_bosh }}"
#  when: "'cn-' in region.stdout and 'cn-hongkong' not in region.stdout"


#- name: Deploy Bosh in Oversea
#  shell: bosh create-env bosh-deployment/bosh.yml --state=state.json --vars-store=creds.yml -o bosh-deployment/alicloud/cpi.yml -o bosh-deployment/jumpbox-user.yml -o bosh-deployment/misc/powerdns.yml -v dns_recursor_ip={{dns_recursor_ip}} -v download_dir={{download_dir}} -v director_name={{director_name}} -v internal_cidr={{internal_cidr}} -v internal_gw={{internal_gw}} -v internal_ip={{internal_ip}} -v vswitch_id={{vswitch_id}} -v security_group_id={{security_group_id_1}} -v access_key_id={{alicloud_access_key}} -v access_key_secret={{alicloud_secret_key}} -v region={{alicloud_region}}  -v zone={{bosh_zone}} -v key_pair_name={{key_pair_name}} -v private_key={{private_key}}
#  args:
#    chdir: '{{ bosh_deploy_dir }}'
#    executable: /bin/bash
#  when: "'cn-hongkong' in region.stdout or 'cn-' not in region.stdout"


- meta: end_play


- name: Deploy Bosh
  shell: '{{ item }}'
  with_items:
    - bosh int ./creds.yml --path ./director_ssl/ca > ca-cert
    - bosh alias-env my-bosh -e {{ bosh.internal_ip }} --ca-cert ca-cert
    - bosh int ./creds.yml --path ./admin_password > password
    - bosh int ./creds.yml --path ./jumpbox_ssh/private_key > jumpbox.key
    - chmod 600 ./jumpbox.key
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash


- name: Get Password
  command: awk 'NR==1{print}' password
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
  register: secret_key


- name: Set Bosh Environment
  shell: '{{ item }}'
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
  with_items:
    - echo export BOSH_CA_CERT=$(pwd)/ca-cert >> ~/.bashrc
    - echo export BOSH_CLIENT=admin >> ~/.bashrc
    - echo export BOSH_CLIENT_SECRET={{ secret_key.stdout }} >> ~/.bashrc
    - echo export CF_DOMAIN={{ system_domain }} >> ~/.bashrc
    - source ~/.bashrc


- name: Set Secret Key and Login
  shell: '{{ item }}'
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
  with_items:
      - echo bosh -e {{ director_name }} l \<\< EOF > bosh_login.sh
      - echo admin >> bosh_login.sh
      - echo {{ secret_key.stdout }} >> bosh_login.sh
      - echo EOF >> bosh_login.sh
      - chmod +x bosh_login.sh
      - ./bosh_login.sh
      - bosh -e my-bosh vms

