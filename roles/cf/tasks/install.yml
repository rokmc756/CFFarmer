---
# Download Stemcell
# - https://bosh.cloudfoundry.org/stemcells/
#
#- name: Register Region
#  command: echo {{ alicloud_region }}
#  register: region


#- name: Download CF CLI and Unarchive From OSS
#  unarchive:
#    src: "https://github.com/cloudfoundry/cli/releases/download/v{{ cf.cli.major_version }}.{{ cf.cli.minor_version }}.{{ cf.cli.patch_version }}/cf8-cli_{{ cf.cli.major_version }}.{{ cf.cli.minor_version }}.{{ cf.cli.patch_version }}_linux_x86_64.tgz"
#    dest: '/usr/local/bin/'
#    remote_src: yes
  # when: "'cn-' in region.stdout and 'cn-hongkong' not in region.stdout"
  # https://github.com/cloudfoundry/cli/releases


#- name: Download CF CLI and Unarchive from VMware Tanzu
#  unarchive:
#    src: 'https://cli.run.pivotal.io/stable?release=linux64-binary&source=github'
#    dest: '/usr/local/bin/'
#    remote_src: yes
#  # when: "'cn-hongkong' in region.stdout or 'cn-' not in region.stdout"


#- name: Write Completion of CF
#  get_url:
#    url: 'https://raw.githubusercontent.com/cloudfoundry/cli/master/ci/installers/completion/cf'
#    dest: /usr/share/bash-completion/completions/
#  become-method: sudo


#- name: Make directory
#  file: path="{{ cf_deploy_dir }}" state=directory


#- name: Copy Releases for China
#  copy:
#    src: releases
#    dest: '{{ cf_deploy_dir }}'
#  when: "'cn-' in region.stdout and 'cn-hongkong' not in region.stdout"


- name: Check if CF Deployment Directory Exists
  stat: path={{ base_path }}/cf-deployment
  register: cf_deploy_dir
- debug: msg={{ cf_deploy_dir }}
  when: print_debug == true


- name: Git Clone CF Deployment
  git:
    repo: "https://github.com/cloudfoundry/cf-deployment"
    dest: "{{ base_path }}/cf-deployment"
  register: git_clone_cf_deploy
  when: cf_deploy_dir.stat.exists == false
- debug: msg={{ git_clone_cf_deploy }}
  when: print_debug == true and cf_deploy_dir.stat.exists == false


- name: Copy Cloud Config Vars File
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/cf-deployment/iaas-support/vsphere/{{ item }}"
  register: copy_cloud_config_vars_file
  with_items:
    - "cloud-config-vars.yml"
- debug: msg={{ copy_cloud_config_vars_file }}


# export BOSH_CA_CERT=<DIRECTOR_CA_CERT_TEXT>
- name: Get BOSH Client Secret
  shell: |
    bosh int creds.yml --path /admin_password
  register: get_bosh_client_secret
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
    BOSH_ENVIRONMENT: "192.168.0.181"
    BOSH_CLIENT: "admin"
- debug: msg={{ get_bosh_client_secret }}
  when: print_debug == true


#  export BOSH_CLIENT_SECRET=`bosh int ./bosh-1/creds.yml --path /admin_password`
- name: Update Runtime Config
  shell: |
    bosh -n -e bosh-1 update-runtime-config bosh-deployment/runtime-configs/dns.yml --name dns
  delegate_to: localhost
  register: update_runtime_config
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
    BOSH_ENVIRONMENT: "192.168.0.181"
    BOSH_CLIENT: "admin"
    BOSH_CLIENT_SECRET: "{{ get_bosh_client_secret.stdout }}"
- debug: msg={{ update_runtime_config }}
  when: print_debug == true


- name: Get Stemcell Version
  shell: |
    bosh interpolate ./cf-deployment/cf-deployment.yml --path=/stemcells/alias=default/version
  register: get_stemcell_version
  args:
    chdir: "{{ base_path }}/"
    executable: /bin/bash
- debug: msg={{ get_stemcell_version }}
  when: print_debug == true


#########################################################################################################################
- name: Configure Local Alias
  shell: |
    bosh alias-env bosh-1 -e 192.168.0.181 --ca-cert <(bosh int ./creds.yml --path /director_ssl/ca)
  register: config_local_alias
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
- debug: msg={{ config_local_alias }}
#########################################################################################################################



#########################################################################################################################
- name: Login to the Bosh Director
  shell: |
    export BOSH_CLIENT_SECRET=`bosh int ./creds.yml --path /admin_password`
    bosh -e bosh-1 env
  register: login_bosh_director
  args:
    chdir: "{{ base_path }}/{{ bosh.director_name }}"
    executable: /bin/bash
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
    BOSH_CLIENT: "admin"
- debug: msg={{ login_bosh_director }}
#########################################################################################################################


# bosh -n upload-stemcell https://bosh.io/d/stemcells/bosh-vsphere-esxi-ubuntu-jammy-go_agent?v=${STEMCELL_VERSION}
# bosh -e bosh-1 upload-stemcell https://bosh.io/d/stemcells/bosh-${IAAS_INFO}-${OS_INFO}-go_agent?v=${STEMCELL_VERSION}
# bosh -e bosh-1 upload-stemcell http://192.168.0.90:81/cf/bosh-stemcell-1.465-vsphere-esxi-ubuntu-jammy-go_agent.tgz
# bosh -e bosh-1 upload-stemcell http://192.168.0.90:81/cf/bosh-stemcell-1.465-vsphere-esxi-ubuntu-jammy-go_agent.tgz
#- name: Upload Stemcell
#  shell: |
#    bosh -e bosh-1 upload-stemcell https://bosh.io/d/stemcells/bosh-${IAAS_INFO}-${OS_INFO}-go_agent?v=${STEMCELL_VERSION}
#  register: upload_stemcell
#  args:
#    chdir: "{{ base_path }}/{{ bosh.director_name }}"
#    executable: /bin/bash
#  environment:
#    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
#    IAAS_INFO: vsphere-esxi
#    OS_INFO: ubuntu-jammy
#    STEMCELL_VERSION: "{{ get_stemcell_version.stdout }}"
#- debug: msg={{ upload_stemcell }}
#  when: print_debug == true


#- name: Update Cloud Config
#  shell: |
#    bosh -n -e bosh-1 update-cloud-config ./cf-deployment/iaas-support/vsphere/cloud-config.yml \
#    --vars-store ./cf-deployment/iaas-support/vsphere/cloud-config-vars.yml
#  register: update_cloud_config
#  args:
#    chdir: "{{ base_path }}/"
#    executable: /bin/bash
#- debug: msg={{ update_cloud_config }}
#  when: print_debug == true


- name: Deploy Cloud Foundry
  shell: |
    bosh -n -e bosh-1 -d cf deploy ./cf-deployment/cf-deployment.yml --vars-store ./cf-deployment/iaas-support/vsphere/cloud-config-vars.yml \
    -v system_domain="$SYSTEM_DOMAIN" -v cf_admin_password=admin -v uaa_admin_client_secret="$BOSH_CLIENT_SECRET"
  register: deploy_cf
  args:
    chdir: "{{ base_path }}/"
    executable: /bin/bash
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
    SYSTEM_DOMAIN: jtest.weka.io
    CF_DOMAIN: jtest.weka.io
    BOSH_CLIENT_SECRET: "{{ get_bosh_client_secret.stdout }}"
- debug: msg={{ deploy_cf }}
  when: print_debug == true

